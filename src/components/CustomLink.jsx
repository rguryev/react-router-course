import React from 'react';
import { Link, useMatch } from 'react-router-dom';

// 11. Делаем кастомный Link, который мы сконфигурируем. Этот линк принимает пропс children чтобы мы могли передавать сюда дочерние элементы, что бы пользователь не написал - это и будет в теле нашей ссылки. Мы можем обернуть этот линк чем угодно (внутри дива, li, любой тег). Принимает to как и обычный линк, это обязательный атрибут. Может примать стили и тд, поэтому делаем деструктуризацию пропсов и все их передаем в линк.

const CustomLink = ({ children, to, ...props }) => {
	// 12. И дополнительно можем стилизовать, это может быть className, styles - для этого надо понять, кастомная ссылка является активной, для этого воспользуемся хуком useMatch. Создаем переменную match, которая = результатом выполнения хука useMatch, который что-то принимает (видно при клике по нему). Передадим тада to как строку
	const match = useMatch(to);
	// 13. Будет возвращать null или какой-то объект. Настройки можно делать через style или className. Делаем через style. Style будет объектом и в нем будет color, который зависит от match (если будет null = false или какой-то объект = true) и через тернарный оператор задаем значения.
	console.log({ match });

	return (
		<Link to={to} style={{ color: match ? 'var(--color-active)' : 'white' }} {...props}>
			{children}
		</Link>
	);
};

export { CustomLink };
